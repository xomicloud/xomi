"use strict";
var _constants = require("./constants");
function setAuthenticationCookie(options, response, accessToken, param) {
    var rememberMe = param === void 0 ? false : param;
    var authenticationCookieName = getAuthenticationCookieName(options), access_token = accessToken, json = {
        access_token: access_token
    }, name = authenticationCookieName, value = JSON.stringify(json), parameters = getParameters(options, rememberMe);
    response.cookie(name, value, parameters);
}
function removeAuthenticationCookie(options, response) {
    var authenticationCookieNAme = getAuthenticationCookieName(options), name = authenticationCookieNAme; ///
    response.clearCookie(name);
}
function isAuthenticationCookiePresent(options, request) {
    var cookies = request.cookies, authenticationCookieNAme = getAuthenticationCookieName(options), name = authenticationCookieNAme, authenticationCookiePresent = !!cookies[name];
    return authenticationCookiePresent;
}
function getAccessTokenFromAuthenticationCookie(options, request) {
    var accessToken = null;
    var authenticationCookiePresent = isAuthenticationCookiePresent(options, request);
    if (authenticationCookiePresent) {
        var cookies = request.cookies, authenticationCookieNAme = getAuthenticationCookieName(options), name = authenticationCookieNAme, value = cookies[name];
        try {
            var json = JSON.parse(value), access_token = json.access_token;
            accessToken = access_token; ///
        } catch (error) {
            accessToken = value; ///
        }
    }
    return accessToken;
}
module.exports = {
    setAuthenticationCookie: setAuthenticationCookie,
    removeAuthenticationCookie: removeAuthenticationCookie,
    isAuthenticationCookiePresent: isAuthenticationCookiePresent,
    getAccessTokenFromAuthenticationCookie: getAccessTokenFromAuthenticationCookie
};
function getAuthenticationCookieName(options) {
    var clientId = options.clientId, authenticationCookieName = "".concat(_constants.AUTHENTICATION_COOKIE_NAME_PREFIX, ".").concat(clientId);
    return authenticationCookieName;
}
function getParameters(options, rememberMe) {
    var parameters = {
    }, domain = options.domain;
    if (domain) {
        Object.assign(parameters, {
            domain: domain
        });
    }
    if (rememberMe) {
        var expires = _constants.AUTHENTICATION_COOKIE_EXPIRES;
        Object.assign(parameters, {
            expires: expires
        });
    }
    return parameters;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb29raWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IEFVVEhFTlRJQ0FUSU9OX0NPT0tJRV9FWFBJUkVTLCBBVVRIRU5USUNBVElPTl9DT09LSUVfTkFNRV9QUkVGSVggfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcblxuZnVuY3Rpb24gc2V0QXV0aGVudGljYXRpb25Db29raWUob3B0aW9ucywgcmVzcG9uc2UsIGFjY2Vzc1Rva2VuLCByZW1lbWJlck1lID0gZmFsc2UpIHtcbiAgY29uc3QgYXV0aGVudGljYXRpb25Db29raWVOYW1lID0gZ2V0QXV0aGVudGljYXRpb25Db29raWVOYW1lKG9wdGlvbnMpLFxuICAgICAgICBhY2Nlc3NfdG9rZW4gPSBhY2Nlc3NUb2tlbiwgLy8vXG4gICAgICAgIGpzb24gPSB7XG4gICAgICAgICAgYWNjZXNzX3Rva2VuXG4gICAgICAgIH0sXG4gICAgICAgIG5hbWUgPSBhdXRoZW50aWNhdGlvbkNvb2tpZU5hbWUsICAvLy9cbiAgICAgICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeShqc29uKSxcbiAgICAgICAgcGFyYW1ldGVycyA9IGdldFBhcmFtZXRlcnMob3B0aW9ucywgcmVtZW1iZXJNZSk7XG5cbiAgcmVzcG9uc2UuY29va2llKG5hbWUsIHZhbHVlLCBwYXJhbWV0ZXJzKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQXV0aGVudGljYXRpb25Db29raWUob3B0aW9ucywgcmVzcG9uc2UpIHtcbiAgY29uc3QgYXV0aGVudGljYXRpb25Db29raWVOQW1lID0gZ2V0QXV0aGVudGljYXRpb25Db29raWVOYW1lKG9wdGlvbnMpLFxuICAgICAgICBuYW1lID0gYXV0aGVudGljYXRpb25Db29raWVOQW1lOyAgLy8vXG5cbiAgcmVzcG9uc2UuY2xlYXJDb29raWUobmFtZSk7XG59XG5cbmZ1bmN0aW9uIGlzQXV0aGVudGljYXRpb25Db29raWVQcmVzZW50KG9wdGlvbnMsIHJlcXVlc3QpIHtcbiAgY29uc3QgeyBjb29raWVzIH0gPSByZXF1ZXN0LFxuICAgICAgICBhdXRoZW50aWNhdGlvbkNvb2tpZU5BbWUgPSBnZXRBdXRoZW50aWNhdGlvbkNvb2tpZU5hbWUob3B0aW9ucyksXG4gICAgICAgIG5hbWUgPSBhdXRoZW50aWNhdGlvbkNvb2tpZU5BbWUsICAvLy9cbiAgICAgICAgYXV0aGVudGljYXRpb25Db29raWVQcmVzZW50ID0gISFjb29raWVzW25hbWVdO1xuXG4gIHJldHVybiBhdXRoZW50aWNhdGlvbkNvb2tpZVByZXNlbnQ7XG59XG5cbmZ1bmN0aW9uIGdldEFjY2Vzc1Rva2VuRnJvbUF1dGhlbnRpY2F0aW9uQ29va2llKG9wdGlvbnMsIHJlcXVlc3QpIHtcbiAgbGV0IGFjY2Vzc1Rva2VuID0gbnVsbDtcblxuICBjb25zdCBhdXRoZW50aWNhdGlvbkNvb2tpZVByZXNlbnQgPSBpc0F1dGhlbnRpY2F0aW9uQ29va2llUHJlc2VudChvcHRpb25zLCByZXF1ZXN0KTtcblxuICBpZiAoYXV0aGVudGljYXRpb25Db29raWVQcmVzZW50KSB7XG4gICAgY29uc3QgeyBjb29raWVzIH0gPSByZXF1ZXN0LFxuICAgICAgICAgIGF1dGhlbnRpY2F0aW9uQ29va2llTkFtZSA9IGdldEF1dGhlbnRpY2F0aW9uQ29va2llTmFtZShvcHRpb25zKSxcbiAgICAgICAgICBuYW1lID0gYXV0aGVudGljYXRpb25Db29raWVOQW1lLCAgLy8vXG4gICAgICAgICAgdmFsdWUgPSBjb29raWVzW25hbWVdO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGpzb24gPSBKU09OLnBhcnNlKHZhbHVlKSxcbiAgICAgICAgICAgIHsgYWNjZXNzX3Rva2VuIH0gPSBqc29uO1xuXG4gICAgICBhY2Nlc3NUb2tlbiA9IGFjY2Vzc190b2tlbjsgLy8vXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGFjY2Vzc1Rva2VuID0gdmFsdWU7ICAvLy9cbiAgICB9XG4gIH1cblxuICByZXR1cm4gYWNjZXNzVG9rZW47XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXRBdXRoZW50aWNhdGlvbkNvb2tpZSxcbiAgcmVtb3ZlQXV0aGVudGljYXRpb25Db29raWUsXG4gIGlzQXV0aGVudGljYXRpb25Db29raWVQcmVzZW50LFxuICBnZXRBY2Nlc3NUb2tlbkZyb21BdXRoZW50aWNhdGlvbkNvb2tpZVxufTtcblxuZnVuY3Rpb24gZ2V0QXV0aGVudGljYXRpb25Db29raWVOYW1lKG9wdGlvbnMpIHtcbiAgY29uc3QgeyBjbGllbnRJZCB9ID0gb3B0aW9ucyxcbiAgICAgICAgYXV0aGVudGljYXRpb25Db29raWVOYW1lID0gYCR7QVVUSEVOVElDQVRJT05fQ09PS0lFX05BTUVfUFJFRklYfS4ke2NsaWVudElkfWA7XG5cbiAgcmV0dXJuIGF1dGhlbnRpY2F0aW9uQ29va2llTmFtZTtcbn1cblxuZnVuY3Rpb24gZ2V0UGFyYW1ldGVycyhvcHRpb25zLCByZW1lbWJlck1lKSB7XG4gIGNvbnN0IHBhcmFtZXRlcnMgPSB7fSxcbiAgICAgICAgeyBkb21haW4gfSA9IG9wdGlvbnM7XG5cbiAgaWYgKGRvbWFpbikge1xuICAgIE9iamVjdC5hc3NpZ24ocGFyYW1ldGVycywge1xuICAgICAgZG9tYWluXG4gICAgfSk7XG4gIH1cblxuICBpZiAocmVtZW1iZXJNZSkge1xuICAgIGNvbnN0IGV4cGlyZXMgPSBBVVRIRU5USUNBVElPTl9DT09LSUVfRVhQSVJFUztcblxuICAgIE9iamVjdC5hc3NpZ24ocGFyYW1ldGVycywge1xuICAgICAgZXhwaXJlc1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHBhcmFtZXRlcnM7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkNBQUEsVUFBWTtJQUVxRSxVQUFhO1NBRXJGLHVCQUF1QixDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLEtBQWtCO1FBQWxCLFVBQVUsR0FBVixLQUFrQixjQUFMLEtBQUssR0FBbEIsS0FBa0I7UUFDM0Usd0JBQXdCLEdBQUcsMkJBQTJCLENBQUMsT0FBTyxHQUM5RCxZQUFZLEdBQUcsV0FBVyxFQUMxQixJQUFJO1FBQ0YsWUFBWSxFQUFaLFlBQVk7T0FFZCxJQUFJLEdBQUcsd0JBQXdCLEVBQy9CLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksR0FDM0IsVUFBVSxHQUFHLGFBQWEsQ0FBQyxPQUFPLEVBQUUsVUFBVTtJQUVwRCxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsVUFBVTs7U0FHaEMsMEJBQTBCLENBQUMsT0FBTyxFQUFFLFFBQVE7UUFDN0Msd0JBQXdCLEdBQUcsMkJBQTJCLENBQUMsT0FBTyxHQUM5RCxJQUFJLEdBQUcsd0JBQXdCLENBQUcsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO0lBRTNDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSTs7U0FHbEIsNkJBQTZCLENBQUMsT0FBTyxFQUFFLE9BQU87UUFDN0MsT0FBTyxHQUFLLE9BQU8sQ0FBbkIsT0FBTyxFQUNULHdCQUF3QixHQUFHLDJCQUEyQixDQUFDLE9BQU8sR0FDOUQsSUFBSSxHQUFHLHdCQUF3QixFQUMvQiwyQkFBMkIsS0FBSyxPQUFPLENBQUMsSUFBSTtXQUUzQywyQkFBMkI7O1NBRzNCLHNDQUFzQyxDQUFDLE9BQU8sRUFBRSxPQUFPO1FBQzFELFdBQVcsR0FBRyxJQUFJO1FBRWhCLDJCQUEyQixHQUFHLDZCQUE2QixDQUFDLE9BQU8sRUFBRSxPQUFPO1FBRTlFLDJCQUEyQjtZQUNyQixPQUFPLEdBQUssT0FBTyxDQUFuQixPQUFPLEVBQ1Qsd0JBQXdCLEdBQUcsMkJBQTJCLENBQUMsT0FBTyxHQUM5RCxJQUFJLEdBQUcsd0JBQXdCLEVBQy9CLEtBQUssR0FBRyxPQUFPLENBQUMsSUFBSTs7Z0JBR2xCLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FDckIsWUFBWSxHQUFLLElBQUksQ0FBckIsWUFBWTtZQUVwQixXQUFXLEdBQUcsWUFBWSxDQUFFLENBQUcsQUFBSCxFQUFHLEFBQUgsQ0FBRztpQkFDeEIsS0FBSztZQUNaLFdBQVcsR0FBRyxLQUFLLENBQUcsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHOzs7V0FJdEIsV0FBVzs7QUFHcEIsTUFBTSxDQUFDLE9BQU87SUFDWix1QkFBdUIsRUFBdkIsdUJBQXVCO0lBQ3ZCLDBCQUEwQixFQUExQiwwQkFBMEI7SUFDMUIsNkJBQTZCLEVBQTdCLDZCQUE2QjtJQUM3QixzQ0FBc0MsRUFBdEMsc0NBQXNDOztTQUcvQiwyQkFBMkIsQ0FBQyxPQUFPO1FBQ2xDLFFBQVEsR0FBSyxPQUFPLENBQXBCLFFBQVEsRUFDVix3QkFBd0IsTUFBMkMsTUFBUSxDQWhFRixVQUFhLHFDQWdFdEIsQ0FBQyxHQUFXLE1BQUEsQ0FBVCxRQUFRO1dBRTFFLHdCQUF3Qjs7U0FHeEIsYUFBYSxDQUFDLE9BQU8sRUFBRSxVQUFVO1FBQ2xDLFVBQVU7T0FDUixNQUFNLEdBQUssT0FBTyxDQUFsQixNQUFNO1FBRVYsTUFBTTtRQUNSLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVTtZQUN0QixNQUFNLEVBQU4sTUFBTTs7O1FBSU4sVUFBVTtZQUNOLE9BQU8sR0FoRmdFLFVBQWE7UUFrRjFGLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVTtZQUN0QixPQUFPLEVBQVAsT0FBTzs7O1dBSUosVUFBVSJ9